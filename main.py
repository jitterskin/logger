import asyncio
import uuid
import logging
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup

from config import BOT_TOKEN, WEBAPP_URL, SUBSCRIPTION_PRICES
from database import Database
from crypto_bot import CryptoBot
from keyboards import (
    get_main_menu, get_subscription_menu, get_logger_actions,
    get_back_to_main, get_confirm_delete
)

# –ò–º—è –ª–æ–≥–≥–µ—Ä-–±–æ—Ç–∞ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏)
LOGGER_BOT_USERNAME = os.getenv('LOGGER_BOT_USERNAME', 'LoggerBot')

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# Initialize database and crypto bot
db = Database('database.db')
crypto_bot = CryptoBot(os.getenv('CRYPTO_BOT_TOKEN'))  # Replace with actual token

# FSM states
class LoggerStates(StatesGroup):
    waiting_for_name = State()

async def get_bot_username():
    me = await bot.me()
    return me.username

# Command handlers
@dp.message(Command("start"))
async def cmd_start(message: types.Message, command: Command):
    args = command.args
    if args:
        unique_id = args
        webapp_url = f"{WEBAPP_URL}/logger/{unique_id}"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –ª–æ–≥–≥–µ—Ä", web_app=WebAppInfo(url=webapp_url))]
            ]
        )
        await message.answer(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.",
            reply_markup=kb
        )
        return
    """Handle /start command"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    
    # Create user if doesn't exist
    await db.create_user(user_id, username or "", first_name or "")
    
    welcome_text = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IP Logger Bot!

–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–±–æ—Ä–∞ IP –∞–¥—Ä–µ—Å–æ–≤ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.

üîó **–õ–æ–≥–≥–µ—Ä—ã** - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
üë§ **–ü—Ä–æ—Ñ–∏–ª—å** - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ  
üíé **–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É** - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
üìä **–ú–æ–∏ –ª–æ–≥–≥–µ—Ä—ã** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ª–æ–≥–≥–µ—Ä–∞–º–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    await message.answer(welcome_text, reply_markup=get_main_menu())

# Main menu handlers
@dp.message(F.text == "üîó –õ–æ–≥–≥–µ—Ä—ã")
async def handle_loggers(message: types.Message):
    """Handle loggers menu"""
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    # Check subscription status
    subscription_active = False
    if user['subscription_expires']:
        expires = datetime.fromisoformat(user['subscription_expires'])
        subscription_active = expires > datetime.now()
    
    limit = 10 if subscription_active and user['subscription_type'] != 'free' else 3
    current_count = len([l for l in await db.get_user_loggers(user_id) if l['is_active']])
    
    text = f"""
üîó **–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞**

üìä –í–∞—à–∏ –ª–∏–º–∏—Ç—ã:
‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –ª–æ–≥–≥–µ—Ä–æ–≤: {current_count}/{limit}
‚Ä¢ –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {user['subscription_type'].title()}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if subscription_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:
"""
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ª–æ–≥–≥–µ—Ä", callback_data="create_logger")
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    keyboard.adjust(1)
    
    await message.answer(text, reply_markup=keyboard.as_markup())

@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def handle_profile(message: types.Message):
    """Handle profile menu"""
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    # Format subscription info
    subscription_info = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
    if user['subscription_expires']:
        expires = datetime.fromisoformat(user['subscription_expires'])
        if expires > datetime.now():
            subscription_info = f"‚úÖ {user['subscription_type'].title()} –¥–æ {expires.strftime('%d.%m.%Y %H:%M')}"
    
    # Get logger count
    loggers = await db.get_user_loggers(user_id)
    active_loggers = len([l for l in loggers if l['is_active']])
    
    text = f"""
üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**

üÜî ID: `{user['user_id']}`
üë§ –ò–º—è: {user['first_name']}
üîó Username: @{user['username'] if user['username'] else '–ù–µ —É–∫–∞–∑–∞–Ω'}
üíé –ü–æ–¥–ø–∏—Å–∫–∞: {subscription_info}
üìä –°–æ–∑–¥–∞–Ω–æ –ª–æ–≥–≥–µ—Ä–æ–≤: {active_loggers}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {datetime.fromisoformat(user['created_at']).strftime('%d.%m.%Y')}
"""
    
    await message.answer(text, reply_markup=get_back_to_main(), parse_mode="Markdown")

@dp.message(F.text == "üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def handle_subscription(message: types.Message):
    """Handle subscription menu"""
    text = """
üíé **–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏**

üìÖ **–ù–µ–¥–µ–ª—è** - $3
‚Ä¢ –î–æ 10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

üìÖ **–ú–µ—Å—è—Ü** - $4  
‚Ä¢ –î–æ 10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –°–∫–∏–¥–∫–∞ 25%

‚ôæÔ∏è **–ù–∞–≤—Å–µ–≥–¥–∞** - $6
‚Ä¢ –î–æ 10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –ü–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞
"""
    
    await message.answer(text, reply_markup=get_subscription_menu())

@dp.message(F.text == "üìä –ú–æ–∏ –ª–æ–≥–≥–µ—Ä—ã")
async def handle_my_loggers(message: types.Message):
    """Handle my loggers menu"""
    user_id = message.from_user.id
    loggers = await db.get_user_loggers(user_id)
    active_loggers = [l for l in loggers if l['is_active']]
    
    if not active_loggers:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤", reply_markup=get_back_to_main())
        return
    
    text = "üìä **–í–∞—à–∏ –ª–æ–≥–≥–µ—Ä—ã:**\n\n"
    
    for logger in active_loggers:
        created_date = datetime.fromisoformat(logger['created_at']).strftime('%d.%m.%Y')
        text += f"""
üîó **{logger['name']}**
üÜî ID: `{logger['unique_id']}`
üìÖ –°–æ–∑–¥–∞–Ω: {created_date}
üåê –°—Å—ã–ª–∫–∞: `{WEBAPP_URL}/logger/{logger['unique_id']}`
"""
    
    text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥–≥–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    
    # Create inline keyboard with logger buttons
    keyboard = InlineKeyboardBuilder()
    for logger in active_loggers:
        keyboard.button(
            text=f"üîó {logger['name']}",
            callback_data=f"manage_{logger['id']}"
        )
    
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    keyboard.adjust(1)
    
    await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")

# Callback handlers
@dp.callback_query(F.data == "create_logger")
async def create_logger_callback(callback: types.CallbackQuery, state: FSMContext):
    """Handle create logger button"""
    user_id = callback.from_user.id
    user = await db.get_user(user_id)
    
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    # Check limits
    subscription_active = False
    if user['subscription_expires']:
        expires = datetime.fromisoformat(user['subscription_expires'])
        subscription_active = expires > datetime.now()
    
    limit = 10 if subscription_active and user['subscription_type'] != 'free' else 3
    current_count = len([l for l in await db.get_user_loggers(user_id) if l['is_active']])
    
    if current_count >= limit:
        await callback.answer(f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ª–æ–≥–≥–µ—Ä–æ–≤ ({limit})")
        return
    
    await state.set_state(LoggerStates.waiting_for_name)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ª–æ–≥–≥–µ—Ä–∞:",
        reply_markup=get_back_to_main()
    )

@dp.message(LoggerStates.waiting_for_name)
async def process_logger_name(message: types.Message, state: FSMContext):
    """Process logger name input"""
    user_id = message.from_user.id
    name = message.text.strip()
    
    if len(name) > 50:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    # Generate unique ID
    unique_id = str(uuid.uuid4())[:8]
    
    # Create logger
    success = await db.create_logger(user_id, unique_id, name)
    
    if success:
        bot_username = await get_bot_username()
        link = f"https://t.me/{LOGGER_BOT_USERNAME}?start={unique_id}"
        text = f"""
‚úÖ **–õ–æ–≥–≥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**

üîó **–ù–∞–∑–≤–∞–Ω–∏–µ:** {name}
üÜî **–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID:** `{unique_id}`
üåê **–°—Å—ã–ª–∫–∞:** `{link}`

üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –∂–µ—Ä—Ç–≤–µ. –ö–æ–≥–¥–∞ –æ–Ω–∞ –æ—Ç–∫—Ä–æ–µ—Ç –µ—ë, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –µ—ë IP –∞–¥—Ä–µ—Å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Telegram –∞–∫–∫–∞—É–Ω—Ç–µ.
"""
        
        await message.answer(text, reply_markup=get_back_to_main(), parse_mode="Markdown")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await state.clear()

@dp.callback_query(F.data.startswith("manage_"))
async def manage_logger_callback(callback: types.CallbackQuery):
    """Handle logger management"""
    logger_id = int(callback.data.split("_")[1])
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞:",
        reply_markup=get_logger_actions(logger_id)
    )

@dp.callback_query(F.data.startswith("stats_"))
async def show_logger_stats(callback: types.CallbackQuery):
    """Show logger statistics"""
    logger_id = int(callback.data.split("_")[1])
    stats = await db.get_logger_stats(logger_id)
    
    text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–≥–µ—Ä–∞**

üìà –í—Å–µ–≥–æ –ª–æ–≥–æ–≤: {stats['total_logs']}

üîÑ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:**
"""
    
    if stats['recent_logs']:
        for log in stats['recent_logs'][:5]:
            created = datetime.fromisoformat(log['created_at']).strftime('%d.%m %H:%M')
            username = log['telegram_username'] or '–ù–µ —É–∫–∞–∑–∞–Ω'
            text += f"‚Ä¢ {log['ip_address']} (@{username}) - {created}\n"
    else:
        text += "–ü–æ–∫–∞ –Ω–µ—Ç –ª–æ–≥–æ–≤"
    
    await callback.message.edit_text(text, reply_markup=get_back_to_main())

@dp.callback_query(F.data.startswith("delete_"))
async def delete_logger_callback(callback: types.CallbackQuery):
    """Handle delete logger"""
    logger_id = int(callback.data.split("_")[1])
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ª–æ–≥–≥–µ—Ä?",
        reply_markup=get_confirm_delete(logger_id)
    )

@dp.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_logger(callback: types.CallbackQuery):
    logger_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ª–æ–≥–≥–µ—Ä–∞
    def get_logger_owner():
        import sqlite3
        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()
        cursor.execute('SELECT user_id FROM loggers WHERE id = ?', (logger_id,))
        row = cursor.fetchone()
        conn.close()
        return row[0] if row else None
    owner_id = get_logger_owner()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if user_id != owner_id and not await is_admin(user_id):
        await callback.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–¥–∞–ª–µ–Ω–∏—é", show_alert=True)
        return
    success = await db.delete_logger(logger_id, owner_id)
    if success:
        await callback.message.edit_text(
            "‚úÖ –õ–æ–≥–≥–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            reply_markup=get_back_to_main()
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞",
            reply_markup=get_back_to_main()
        )

@dp.callback_query(F.data.startswith("sub_"))
async def handle_subscription_payment(callback: types.CallbackQuery):
    """Handle subscription payment"""
    subscription_type = callback.data.split("_")[1]
    
    if subscription_type not in SUBSCRIPTION_PRICES:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏")
        return
    
    price = SUBSCRIPTION_PRICES[subscription_type]
    
    # Create payment invoice
    invoice = await crypto_bot.create_invoice(
        amount=price,
        asset="USDT",
        description=f"–ü–æ–¥–ø–∏—Å–∫–∞ {subscription_type} - IP Logger Bot"
    )
    
    if invoice:
        text = f"""
üí≥ **–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription_type.title()}**

üí∞ –°—É–º–º–∞: ${price}
üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {invoice.get('pay_url', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}

‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"
"""
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment_{invoice['invoice_id']}_{subscription_type}")
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        keyboard.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_main()
        )

@dp.callback_query(F.data.startswith("check_payment_"))
async def check_payment_status(callback: types.CallbackQuery):
    """Check payment status"""
    parts = callback.data.split("_")
    invoice_id = parts[2]
    subscription_type = parts[3]
    
    status = await crypto_bot.get_invoice_status(invoice_id)
    
    if status == "paid":
        user_id = callback.from_user.id
        
        # Update subscription
        duration_map = {
            'week': 7,
            'month': 30,
            'forever': 36500
        }
        
        await db.update_subscription(user_id, subscription_type, duration_map[subscription_type])
        
        await callback.message.edit_text(
            "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.",
            reply_markup=get_back_to_main()
        )
    elif status == "pending":
        await callback.answer("‚è≥ –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

@dp.callback_query(F.data == "back_to_main")
async def back_to_main_callback(callback: types.CallbackQuery):
    """Back to main menu"""
    await callback.message.delete()
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )

@dp.callback_query(F.data == "back_to_loggers")
async def back_to_loggers_callback(callback: types.CallbackQuery):
    """Back to loggers menu"""
    await callback.message.delete()
    await handle_loggers(callback.message)

async def is_admin(user_id: int) -> bool:
    admin_ids = await db.get_admin_ids()
    return user_id in admin_ids

@dp.message(Command("addadmin"))
async def add_admin_cmd(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /addadmin <user_id>")
        return
    new_admin_id = int(args[1])
    await db.add_admin(new_admin_id)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω.")

@dp.message(Command("removeadmin"))
async def remove_admin_cmd(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /removeadmin <user_id>")
        return
    del_admin_id = int(args[1])
    await db.remove_admin(del_admin_id)
    await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {del_admin_id} –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω.")

@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    users = await db.get_all_users()
    loggers = await db.get_all_loggers()
    iplogs = await db.get_all_iplogs()
    text = f"""
<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}
üîó –õ–æ–≥–≥–µ—Ä–æ–≤: {len(loggers)}
üåê IP-–ª–æ–≥–æ–≤: {len(iplogs)}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
    keyboard.button(text="üîó –õ–æ–≥–≥–µ—Ä—ã", callback_data="admin_loggers")
    keyboard.button(text="üåê IP-–ª–æ–≥–∏", callback_data="admin_iplogs")
    keyboard.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    keyboard.adjust(1)
    await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")

@dp.callback_query(F.data == "admin_users")
async def admin_users_callback(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    users = await db.get_all_users()
    text = "<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
    for u in users[:20]:
        text += f"ID: <code>{u[0]}</code> | @{u[1] or '-'} | {u[2]} | {u[3]} | {u[4] or '-'}\n"
    text += f"\n–ü–æ–∫–∞–∑–∞–Ω–æ {min(len(users), 20)} –∏–∑ {len(users)}."
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
    await callback.message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")

@dp.callback_query(F.data == "admin_loggers")
async def admin_loggers_callback(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    loggers = await db.get_all_loggers()
    text = "<b>–õ–æ–≥–≥–µ—Ä—ã:</b>\n\n"
    for l in loggers[:20]:
        text += f"ID: <code>{l[0]}</code> | User: <code>{l[1]}</code> | {l[3]} | –ê–∫—Ç–∏–≤–µ–Ω: {'‚úÖ' if l[5] else '‚ùå'}\n"
    text += f"\n–ü–æ–∫–∞–∑–∞–Ω–æ {min(len(loggers), 20)} –∏–∑ {len(loggers)}."
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
    await callback.message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")

@dp.callback_query(F.data == "admin_iplogs")
async def admin_iplogs_callback(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    iplogs = await db.get_all_iplogs()
    text = "<b>IP-–ª–æ–≥–∏:</b>\n\n"
    for ip in iplogs[:20]:
        text += f"ID: <code>{ip[0]}</code> | Logger: <code>{ip[1]}</code> | IP: {ip[2]} | TG: {ip[4] or '-'} | {ip[6][:16]}\n"
    text += f"\n–ü–æ–∫–∞–∑–∞–Ω–æ {min(len(iplogs), 20)} –∏–∑ {len(iplogs)}."
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
    await callback.message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")

@dp.callback_query(F.data == "admin_back")
async def admin_back_callback(callback: types.CallbackQuery):
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    users = await db.get_all_users()
    loggers = await db.get_all_loggers()
    iplogs = await db.get_all_iplogs()
    text = f"""
<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}
üîó –õ–æ–≥–≥–µ—Ä–æ–≤: {len(loggers)}
üåê IP-–ª–æ–≥–æ–≤: {len(iplogs)}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
    keyboard.button(text="üîó –õ–æ–≥–≥–µ—Ä—ã", callback_data="admin_loggers")
    keyboard.button(text="üåê IP-–ª–æ–≥–∏", callback_data="admin_iplogs")
    keyboard.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    keyboard.adjust(1)
    await callback.message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")

@dp.message(Command("grant_sub"))
async def grant_subscription_cmd(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    parts = message.text.strip().split()
    if len(parts) != 3 or not parts[1].isdigit():
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /grant_sub <user_id> <week|month|forever>")
        return
    target_user_id = int(parts[1])
    sub_type = parts[2].lower()
    if sub_type not in {"week", "month", "forever"}:
        await message.answer("–¢–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: week, month –∏–ª–∏ forever")
        return
    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    user = await db.get_user(target_user_id)
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
        return
    days_map = {"week": 7, "month": 30, "forever": 36500}
    await db.update_subscription(target_user_id, sub_type, days_map[sub_type])
    await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ {sub_type} –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")

@dp.message(Command("grant_admin"))
async def grant_admin_cmd(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    parts = message.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /grant_admin <user_id>")
        return
    target_id = int(parts[1])
    await db.add_admin(target_id)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º")

@dp.message(Command("revoke_admin"))
async def revoke_admin_cmd(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    parts = message.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /revoke_admin <user_id>")
        return
    target_id = int(parts[1])
    await db.remove_admin(target_id)
    await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –ª–∏—à—ë–Ω –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞")

@dp.message(Command("revoke_sub"))
async def revoke_subscription_cmd(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    parts = message.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /revoke_sub <user_id>")
        return
    target_user_id = int(parts[1])
    user = await db.get_user(target_user_id)
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
        return
    await db.revoke_subscription(target_user_id)
    await message.answer(f"‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ —Å–Ω—è—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}")

# Error handler
@dp.errors()
async def errors_handler(update: types.Update, exception: Exception):
    """Handle errors"""
    logger.error(f"Exception while handling {update}: {exception}")

# Main function
async def main():
    """Main function"""
    logger.info("Starting bot...")
    
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("Bot stopped")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
